
Fecha: 11/11/23                                      Grupo: 1.2

 # Informe Algoritmos P3 (Algoritmo de ordenación por montículos) #


Nombres/Logins:

 * AUTHOR 1: Adrián Edreira Gantes    LOGIN 1: adrian.gantes@udc.es
 * AUTHOR 2: Ángela Fouz Suárez       LOGIN 2: angela.fouz@udc.es
 * AUTHOR 3: Gael Saavedra Pinho      LOGIN 3: g.spinho@udc.es


Objetivo:

    En esta práctica utilizaremos un algoritmo de ordenación por montículos.
   
    Nuestro objetivo es demostrar la complejidad empírica de dicho algoritmo,
  además de la complejidad empírica a la hora de crear el montículo con un vector
  aleatorio. Para ello, estudiaremos 3 casos diferentes (vectores aleatorios,
  descendentes y ascendentes), obteniendo sus tiempos de ejecución y calculando su
  complejidad teórica.


Especificaciones de la máquina:

  + Equipo: Victus by HP Laptop 16-d1033ns
  + OS: Kali GNU/Linux Rolling 2023.3
  + Procesador: Intel Core i7-12700H, 4.7GHz, 24 MB L3 cache,
 	        14 núcleos y 20 hilos.
  + RAM: 16 GB DDR5-4800 Mhz (2 x 8 GB)
  + Kernel: Linux 6.5.0-kali1-amd64
  + Compilador: gcc (Debian 13.2.0-2) 13.2.0


Unidades:

  Las unidades empleadas para la medida de los tiempos son microsegundos(micros).


Algoritmo de ordenación por montículos:

void ordenarPorMonticulos(int v[], int n) {
    int i;
    pmonticulo m = malloc(sizeof(struct monticulo));
    crearMonticulo(v, n, m);

    for (i = 0; i < n; i++) {
        v[i] = quitarMenor(m);
    }
    free (m);
}



Método Empleado:

    Lo primero que hicimos fue comprobar que el algoritmo de creación de 
  montículos se ejecutase correctamente. Tras ello demostramos empíricamente
  que para cualquier vector de n elementos, su ejecución se llevaba a cabo en
  O(n). Posteriormente, implementamos el algoritmo de ordenación por montículos
  y comprobamos su correcto funcionamiento.
  
    Por último creamos una funcion para medir los tiempos de ejecución del 
  algoritmo de ordenación para cada tipo de vector, comprobando la hora de la
  máquina antes y después de ejecutarlo.

    Cabe destacar que para tiempos menores de 500micros calcularemos los tiempos
  de los algoritmos mediante la siguiente formula: (tb-ta)/k (donde k son las
  repeticiones, en este caso 1000; tb, que corresponde a la hora del sistema
  después de ejecutar el algoritmo; y ta, que corresponde a la hora del sistema
  antes de ejecutar el algoritmo). Estos casos se marcarán en la tabla con un
  "*" al final de la línea. 

    Ejecutamos nuestro código repetidas veces para evitar mediciones anómalas, las
  cuales están reportadas más adelante, comprobamos que los tiempos (t(n)) devueltos
  por nuestras funciones son correctos y los registramos en una tabla con su
  respectiva cantidad de valores (n) y sus correspondientes cotas.
  
  
Anomalías:

    Para la creación de montículos nos encontramos tiempos más grandes de lo esperado
  para n=500 en todas nuestras ejecuciones. Sin embargo, para el mismo valor de n nos
  encontramos con tiempos menores a los esperados ordenando montículos con vectores
  inicialmente ascendentes. Para la ordenación por montículos con vectores descendentes
  con 500 y 1000 elementos vemos que tenemos también tiempos muy pequeños.
  
    Todos estos valores no se han tenido en cuenta para el cálculo de constantes.
  

Cálculo de complejidad teórica:

    La forma empleada para calcular la complejidad del algoritmo es
  observando los bucles anidados y multiplicando su complejidad.
  
    Para el cálculo de la complejidad teórica del algoritmo de creación por montículos
  nos fijamos en sus bucles y llegamos a la conslusión de que el primer bucle se ejecuta
  n veces y el segundo solo la mitad, solo recorre los vértices internos del montículo.
  Pero este último bucle tiene una complejidad O(log(n)) la cual es ignorada en este
  análisis al depender de valores constantes, dando una complejidad final de O(n).
  
    Para el cálculo de la complejidad teórica del algoritmo de ordenación por montículos
  nos fijamos en su llamada a crearMonticulo y en su bucle. Sabemos que la complejidad
  teórica de crearMonticulo es O(n) y si calculamos la complejidad del bucle, nos damos
  cuenta de que depende de la llamada a quitarMenor. Esta tiene una complejidad O(log(n)),
  pues debera hundir siempre un valor hasta, aproximadamente, la altura del montículo,
  que es la parte entera de log(n). En conclusión, su complejidad teórica es O(n * log(n)).
  
  
  * Creación de montículo:    O(n)
  * Ordenación de montículo:  O(n * log(n))


Resultados:

 Creación de montículo aleatorio:

   - Cota Subestimada:  f(n) = n^0.8
   - Cota Ajustada:     g(n) = n
   - Cota Sobrestimada: h(n) = n^1.2


   n           t(n)        t(n)/f(n)      t(n)/g(n)      t(n)/h(n)    t<500

   500         9.368       0.064934       0.018736       0.005406       *
  1000        12.509       0.049799       0.012509       0.003142       *
  2000        24.381       0.055748       0.012190       0.002666       *
  4000        48.422       0.063591       0.012105       0.002304       *
  8000        98.145       0.074028       0.012268       0.002033       *
 16000       192.530       0.083407       0.012033       0.001736       *
 32000       382.623       0.095203       0.011957       0.001502       *
 64000       861.000       0.123044       0.013453       0.001471
128000      1678.000       0.137729       0.013109       0.001248
256000      3044.000       0.143500       0.011891       0.000985

   La cota ajustada tiende a la constante C=0.012000
   

 Ordenacion por Montículos con inicializacion aleatoria:

   - Cota Subestimada:  f(n) = n^0.9
   - Cota Ajustada:     g(n) = n*log(n)
   - Cota Sobrestimada: h(n) = n^1.3

   n           t(n)        t(n)/f(n)      t(n)/g(n)      t(n)/h(n)    t<500

   500        38.670       0.143980       0.008626       0.011987       *
  1000        83.576       0.166756       0.008386       0.010522       *
  2000       185.064       0.197877       0.008438       0.009462       *
  4000       398.337       0.228243       0.008322       0.008271       *
  8000       855.000       0.262589       0.008245       0.007212       
 16000      1913.000       0.314780       0.008561       0.006552
 32000      4033.000       0.355626       0.008421       0.005610
 64000      8528.000       0.402982       0.008346       0.004817
128000     18067.000       0.457506       0.008320       0.004145
256000     37741.000       0.512150       0.008206       0.003516

   La cota ajustada tiende a la constante C=0.008300
   

 Ordenacion por Montículos con inicializacion descendente

   - Cota Subestimada:  f(n) = n^0.9
   - Cota Ajustada:     g(n) = n*log(n)
   - Cota Sobrestimada: h(n) = n^1.3

   n           t(n)        t(n)/f(n)      t(n)/g(n)      t(n)/h(n)    t<500

   500        19.622       0.073058       0.004377       0.006083       *
  1000        50.203       0.100168       0.005038       0.006320       *
  2000       139.938       0.149627       0.006381       0.007155       *
  4000       298.344       0.170948       0.006233       0.006195       *
  8000       638.000       0.196176       0.006159       0.005388       
 16000      1456.000       0.239582       0.006516       0.004987
 32000      2938.000       0.259070       0.006135       0.004087
 64000      6289.000       0.297180       0.006155       0.003553
128000     13118.000       0.332184       0.006041       0.003010
256000     27607.000       0.374631       0.006003       0.002575

   La cota ajustada tiende a la constante C=0.006100
   

 Ordenacion por Montículos con inicializacion ascendente

   - Cota Subestimada:  f(n) = n^0.9
   - Cota Ajustada:     g(n) = n*log(n)
   - Cota Sobrestimada: h(n) = n^1.3

   n           t(n)        t(n)/f(n)      t(n)/g(n)      t(n)/h(n)    t<500

   500        17.779       0.066196       0.003966       0.005511       *
  1000        60.860       0.121432       0.006107       0.007662       *
  2000       148.661       0.158953       0.006778       0.007601       *
  4000       309.196       0.177166       0.006460       0.006420       *
  8000       651.000       0.200031       0.006280       0.005494       
 16000      1460.000       0.240240       0.006534       0.005000
 32000      2994.000       0.264008       0.006252       0.004164
 64000      6379.000       0.301433       0.006243       0.003603
128000     13757.000       0.348365       0.006335       0.003156
256000     26753.000       0.363042       0.005817       0.002493

   La cota ajustada tiende a la constante C=0.006300


Conclusión:

    Según los resultados obtenidos hemos llegado a las siguientes conclusiones:
      
      -La complejidad empírica de la creación de montículos es la esperada por la
       complejidad teórica, O(n). Sin embargo, para cantidades próximas o menores
       a 500 elementos obtendremos tiempos mayores a los esperados.
       
      -Por otro parte, la complejidad empírica de la ordenación por montículos es
       O(n log(n)), la esperada al calcular su complejidad teórica.
       
      -En relación a la ordenación por montículos podemos destacar tiempos muy
       próximos inicializando el vector de manera ascendente o descendente, con
       constantes muy similares. Además, la diferencia no es muy llamativa al
       compararla con la inicialización aleatoria.
       
      -Con todo esto en cuenta, podemos afirmar que este algoritmo es ideal para
       cualquier vector inicial siempre que exista la misma posibilidad de recibir
       un vector previamente ordenado, independientemente del orden, o uno aleatorio.


 	


